<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.2">Jekyll</generator><link href="http://localhost:4000/portfolio/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/portfolio/" rel="alternate" type="text/html" /><updated>2019-01-29T10:07:44+00:00</updated><id>http://localhost:4000/portfolio/</id><title type="html">Marco Moroni</title><subtitle>Ciao, here's my portfolio.</subtitle><entry><title type="html">Idliketogohome</title><link href="http://localhost:4000/portfolio/idliketogohome/" rel="alternate" type="text/html" title="Idliketogohome" /><published>2019-01-27T00:00:00+00:00</published><updated>2019-01-27T00:00:00+00:00</updated><id>http://localhost:4000/portfolio/idliketogohome</id><content type="html" xml:base="http://localhost:4000/portfolio/idliketogohome/">&lt;p&gt;&lt;img src=&quot;/portfolio/assets/idliketogohome/h1.png&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;/portfolio/assets/idliketogohome/h2.png&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;/portfolio/assets/idliketogohome/h3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I made &lt;em&gt;I’d like to go home&lt;/em&gt; during the 48h of the &lt;a href=&quot;https://globalgamejam.org/&quot;&gt;Global Game Jam&lt;/a&gt; 2019. &lt;a href=&quot;https://marcomoroni.itch.io/id-like-to-go-home&quot;&gt;Play it on itch.io&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;This year I decided to go all solo: I draw the assets and I used &lt;a href=&quot;https://unity3d.com/&quot;&gt;Unity&lt;/a&gt; to build it. It’s made with 2D sprites in a 3D side-scrolling scene.&lt;/p&gt;

&lt;p&gt;It’s a short story about a rabbit that lost his way home. My attention was all on the &lt;em&gt;feelings&lt;/em&gt; and &lt;em&gt;immersion&lt;/em&gt; of the player and the art-style was inspired by &lt;a href=&quot;http://jonklassen.tumblr.com/&quot;&gt;Jon Klassen&lt;/a&gt;—for the characters and the story—and &lt;a href=&quot;https://galshir.com/&quot;&gt;Gal Shir&lt;/a&gt;—for the colours and the vegetation.&lt;/p&gt;

&lt;p&gt;Some technical insights:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;The background seems to be of one solid dark purple: the 3D plane on the ground has a shader that outputs a solid colour that is not affected by anything (just like a sprite) and the camera outputs the same colour when there are no elements on the screen. In this way you cannot see where the plane ends, and it gives the impression of a consistent colour.&lt;/li&gt;
  &lt;li&gt;The camera is controlled by Unity’s Cinemachine and it has a noise and vignette post-processing effect.&lt;/li&gt;
  &lt;li&gt;The sprites are generally made in two steps: first, draw the basic shape with a solid colour; second, use a sand/spray brush to add a secondary colour.&lt;/li&gt;
  &lt;li&gt;There is what seems to be a 3D model of a home: at the time of writing I don’t know how to 3D model, so I simply assembled it with some sprites (&lt;em&gt;hehe&lt;/em&gt;).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All the code is in &lt;a href=&quot;https://github.com/marcomoroni/ggj-2019&quot;&gt;here&lt;/a&gt;, and you can &lt;a href=&quot;https://marcomoroni.itch.io/id-like-to-go-home&quot;&gt;play it online on itch.io&lt;/a&gt;.&lt;/p&gt;</content><author><name></name></author><category term="game jam" /><category term="games dev" /><category term="unity" /><summary type="html"></summary></entry><entry><title type="html">Tabletop</title><link href="http://localhost:4000/portfolio/tabletop/" rel="alternate" type="text/html" title="Tabletop" /><published>2018-12-19T00:00:00+00:00</published><updated>2018-12-19T00:00:00+00:00</updated><id>http://localhost:4000/portfolio/tabletop</id><content type="html" xml:base="http://localhost:4000/portfolio/tabletop/">&lt;p&gt;This is a tabletop engine made with &lt;a href=&quot;https://unity3d.com/&quot;&gt;Unity&lt;/a&gt;: a player can drag-and-drop cards across different &lt;em&gt;decks&lt;/em&gt; (a &lt;em&gt;deck&lt;/em&gt; is considered a collection of cards that can be laid down in different ways). A developer should be able to easily set up a scene for any board game (not &lt;em&gt;any&lt;/em&gt; but you get the point). To help out developers I built some tools to arrange the scene using the powerful feature of the Unity Editor.&lt;/p&gt;

&lt;p&gt;The Unity Package with a short guide is &lt;a href=&quot;https://github.com/marcomoroni/set10110&quot;&gt;on GitHub&lt;/a&gt;. It’s not &lt;em&gt;complete&lt;/em&gt;, but it should work for simple games.&lt;/p&gt;

&lt;h3 id=&quot;tabletop-engine&quot;&gt;Tabletop engine&lt;/h3&gt;

&lt;p&gt;The engine based around two concepts: &lt;em&gt;cards&lt;/em&gt; and &lt;em&gt;decks&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;A deck takes a &lt;code class=&quot;highlighter-rouge&quot;&gt;TabletopDeckStyle&lt;/code&gt; Scriptable Object as a parameter: it contains the data on how the cards should be placed on the table. &lt;code class=&quot;highlighter-rouge&quot;&gt;TabletopDeckStyle&lt;/code&gt; can be a line or a circle and from the Inspector is possible to change many variable, for example the gap between cards, the max scatter (position and angle), the alignment, etc.&lt;/p&gt;

&lt;p&gt;Cards can be moved around with your cursor or by using simple functions like &lt;code class=&quot;highlighter-rouge&quot;&gt;AddCard()&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;AddCards()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/portfolio/assets/tabletop/engine01.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;developer-tools&quot;&gt;Developer tools&lt;/h3&gt;

&lt;p&gt;I build a handy Editor Window to manage the cards that will be added to the scene; it was soon clear that that was most necessary tool to have, otherwise every card should have been changed individually. It consists on a database where cards can be added, deleted or duplicated. Once they are ready you only need to click on “Update Scene” to create the cards. The &lt;em&gt;default&lt;/em&gt; values are the ones a new card will have when added. For example, if every card has the same back sprite, set it as default, and every new card will have it.&lt;/p&gt;

&lt;p&gt;Decks have Gizmos to show where cards will be placed once in Game mode. These are always visible and if a deck is selected the gizmos will change color. The whitest gizmo box corresponds to the first (or top) card of a deck.&lt;/p&gt;

&lt;p&gt;Also, all Inspectors are custom made to allow more functionalities and better UI.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/portfolio/assets/tabletop/database.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/portfolio/assets/tabletop/inspector.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/portfolio/assets/tabletop/gizmos.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;</content><author><name></name></author><category term="tools dev" /><category term="unity" /><summary type="html">This is a tabletop engine made with Unity: a player can drag-and-drop cards across different decks (a deck is considered a collection of cards that can be laid down in different ways). A developer should be able to easily set up a scene for any board game (not any but you get the point). To help out developers I built some tools to arrange the scene using the powerful feature of the Unity Editor.</summary></entry><entry><title type="html">Ray Tracer</title><link href="http://localhost:4000/portfolio/raytracer/" rel="alternate" type="text/html" title="Ray Tracer" /><published>2018-12-18T00:00:00+00:00</published><updated>2018-12-18T00:00:00+00:00</updated><id>http://localhost:4000/portfolio/ray-tracer</id><content type="html" xml:base="http://localhost:4000/portfolio/raytracer/">&lt;p&gt;&lt;img src=&quot;/portfolio/assets/raytracer/ray02.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Future shines bright for ray tracers, and although the theory behind them is fairly simple, they are magnificently &lt;em&gt;slow&lt;/em&gt;.&lt;/p&gt;

&lt;!--&lt;div style=&quot;background-color: red; height: 40px; width: calc(100vw - 40px); position: relative; left: 50%; margin-left: calc(-50vw + 20px); margin-bottom: 2.8em; margin-top: 2.8em;&quot;&gt;
&lt;/div&gt;--&gt;

&lt;p&gt;I investigated different parallelization ways to speed up a path tracer. I used &lt;em&gt;&lt;a href=&quot;http://www.kevinbeason.com/smallpt/&quot;&gt;smallpt&lt;/a&gt;&lt;/em&gt; as a base, but to keep it as simple as possible I removed unnecessary features such as pixel subdivision and tent filter.&lt;/p&gt;

&lt;p&gt;The two methods that I implemented are &lt;a href=&quot;https://www.openmp.org/&quot;&gt;OpenMP&lt;/a&gt; for CPU parallelization and &lt;a href=&quot;https://developer.nvidia.com/cuda-zone&quot;&gt;CUDA&lt;/a&gt; for GPU parallelization. They both target the loop that iterates through all the pixels.&lt;/p&gt;

&lt;p&gt;You can already find an OpenMP in &lt;em&gt;samllpt&lt;/em&gt;, and it consists in one single line. CUDA implementation took a bit more effort, especially because when you put too much data into the GPU there’s no easy way to tell whether it’s going to crash. It just happens.&lt;/p&gt;

&lt;p&gt;By the end, an image with a resolution of 1024 × 768 pixels with 100 samples per pixel took:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;94 seconds with sequential code&lt;/li&gt;
  &lt;li&gt;15 seconds with OpenMP&lt;/li&gt;
  &lt;li&gt;2 seconds with CUDA&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The repo is &lt;a href=&quot;https://github.com/marcomoroni/set10108&quot;&gt;here&lt;/a&gt; and it also contains a detailed report of the work.&lt;/p&gt;</content><author><name></name></author><category term="graphics" /><category term="parallel programming" /><summary type="html"></summary></entry><entry><title type="html">Clock</title><link href="http://localhost:4000/portfolio/clock/" rel="alternate" type="text/html" title="Clock" /><published>2018-09-09T00:00:00+01:00</published><updated>2018-09-09T00:00:00+01:00</updated><id>http://localhost:4000/portfolio/clock</id><content type="html" xml:base="http://localhost:4000/portfolio/clock/">&lt;p&gt;&lt;img src=&quot;/portfolio/assets/clock/clock-sand.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/portfolio/assets/clock/clock-sky.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This is the clock you can find on my phone home screen. I made it using &lt;a href=&quot;https://play.google.com/store/apps/details?id=org.kustom.wallpaper&amp;amp;hl=en_GB&quot;&gt;KWLP&lt;/a&gt; and it was inspired by the Prague astronomical clock (that you can see below) and possibly by Dumbledore’s pocket watch.&lt;/p&gt;

&lt;p class=&quot;no-modal&quot;&gt;&lt;img src=&quot;/portfolio/assets/clock/fabrizio-verrecchia-180315-unsplash.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here’s how it works:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/portfolio/assets/clock/clock-explained.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You’re probably wondering &lt;em&gt;why&lt;/em&gt;. That’s a very good question.&lt;/p&gt;</content><author><name></name></author><category term="android" /><summary type="html"></summary></entry><entry><title type="html">Azucena</title><link href="http://localhost:4000/portfolio/azucena/" rel="alternate" type="text/html" title="Azucena" /><published>2018-05-02T00:00:00+01:00</published><updated>2018-05-02T00:00:00+01:00</updated><id>http://localhost:4000/portfolio/azucena</id><content type="html" xml:base="http://localhost:4000/portfolio/azucena/">&lt;p&gt;&lt;em&gt;Azucena&lt;/em&gt; has been my first complete game. &lt;a href=&quot;https://marcomoroni.github.io/azucena/&quot;&gt;This is its website&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;I made this game as a university coursework, and the project included a pitch presentation and a game design document.&lt;/p&gt;

&lt;p&gt;I took inspiration mainly from two games: &lt;em&gt;The Legend of Zelda&lt;/em&gt; and &lt;em&gt;&lt;a href=&quot;http://www.heart-machine.com/&quot;&gt;Hyper Light Drifter&lt;/a&gt;&lt;/em&gt;. You play as Azucena, a llama who has to rescue her three babies. Each of them is waiting at the end of a level and the levels can be visited in any order.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/portfolio/assets/azucena/capture_01.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It runs on an engine built from scratch in C++, with the help of &lt;a href=&quot;https://www.sfml-dev.org/&quot;&gt;SFML&lt;/a&gt; and &lt;a href=&quot;https://github.com/erincatto/Box2D&quot;&gt;Box2D&lt;/a&gt;. The pieces are the same you would expect to find in any game engine: scenes, entities, components, etc. The game has all the basic technical features necessary to consider a game &lt;em&gt;a game&lt;/em&gt;, for example: a menu, save and load, a tutorial, an ending, sounds and music, support for different screen resolutions, remappable controls and joystick support.&lt;/p&gt;

&lt;p&gt;The source code is &lt;a href=&quot;https://github.com/marcomoroni/azucena&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/portfolio/assets/azucena/capture_04.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/portfolio/assets/azucena/capture_02.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/portfolio/assets/azucena/capture_03.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;</content><author><name></name></author><category term="games dev" /><summary type="html">Azucena has been my first complete game. This is its website!</summary></entry><entry><title type="html">Lens Vr</title><link href="http://localhost:4000/portfolio/lens-vr/" rel="alternate" type="text/html" title="Lens Vr" /><published>2018-05-01T00:00:00+01:00</published><updated>2018-05-01T00:00:00+01:00</updated><id>http://localhost:4000/portfolio/lens-vr</id><content type="html" xml:base="http://localhost:4000/portfolio/lens-vr/">&lt;p&gt;&lt;img src=&quot;/portfolio/assets/lens-vr/capture07.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This experimental VR application developed for &lt;a href=&quot;https://www.disneyresearch.com/&quot;&gt;Disney Research&lt;/a&gt; lets you navigate through a dataset. One of the controllers is a lens that distorts what you see and magnifies a certain area.&lt;/p&gt;

&lt;p&gt;I worked in a team of six people, and my task was the importation and visualization of the datasets in the &lt;a href=&quot;https://unity3d.com/&quot;&gt;Unity&lt;/a&gt; engine. For this demonstration we used data representing the revenue of different films. It is possible to read the details of each point in the other controller.&lt;/p&gt;

&lt;p&gt;It was awarded as the second best group project of the year.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/portfolio/assets/lens-vr/capture05.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/portfolio/assets/lens-vr/capture06.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/portfolio/assets/lens-vr/capture03.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/portfolio/assets/lens-vr/capture01.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/portfolio/assets/lens-vr/capture02.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/portfolio/assets/lens-vr/capture04.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/portfolio/assets/lens-vr/capture08.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;</content><author><name></name></author><category term="unity" /><category term="vr" /><category term="data visualisation" /><summary type="html"></summary></entry><entry><title type="html">Physics Based Animation</title><link href="http://localhost:4000/portfolio/pba/" rel="alternate" type="text/html" title="Physics Based Animation" /><published>2017-12-01T00:00:00+00:00</published><updated>2017-12-01T00:00:00+00:00</updated><id>http://localhost:4000/portfolio/physics-based-animation</id><content type="html" xml:base="http://localhost:4000/portfolio/pba/">&lt;p&gt;This is a set of physics-based animations I made at university using C++. &lt;a href=&quot;https://github.com/marcomoroni/set09119&quot;&gt;Here’s the code on GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;flag&quot;&gt;Flag&lt;/h3&gt;

&lt;p&gt;These particles are connected by springs and I applied an isotropic wind to the the triangulated cloth (not to each individual particles).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/portfolio/assets/pba/flag.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;point-gravity&quot;&gt;Point gravity&lt;/h3&gt;

&lt;p&gt;Here you can see a group of particles that are affected by two points of gravity. The gravity, just as you would expect, is stronger the closer to these points and null after a certain set distance.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/portfolio/assets/pba/point.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;newtons-gravity-between-any-two-bodies&quot;&gt;Newton’s gravity between any two bodies&lt;/h3&gt;

&lt;p&gt;While the previous simulation does not use any physically correct gravitational formula, this one uses Newton’s law of gravity: every two particles with mass are affected by each other. To be able to see such interactions I decided to make them stick together once they get very close.&lt;/p&gt;

&lt;p&gt;The lighter particle has a higher mass.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/portfolio/assets/pba/newton.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;super-mario-galaxys-gravity&quot;&gt;&lt;em&gt;Super Mario Galaxy&lt;/em&gt;’s gravity&lt;/h3&gt;

&lt;p&gt;In &lt;em&gt;Super Mario Galaxy&lt;/em&gt; the player is able to walk in planetoids of any shape and size. This is possible because bodies are affected by the gravity of only one planetoid at once and the gravity direction is the inverse of the normal of (usually) the closest surface.&lt;/p&gt;

&lt;p&gt;I’ve managed to apply this principle to particles in box-shaped planetoids. The gravity direction is the normalised vector from the particle to a point &lt;em&gt;U&lt;/em&gt;, where &lt;em&gt;U&lt;/em&gt; is the point on (or in) the planetoid closest to the particle.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/portfolio/assets/pba/smg.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;rigidbody-obb&quot;&gt;RigidBody (OBB)&lt;/h3&gt;

&lt;p&gt;This is a rigidbody with the shape of a box (OBB) colliding with a plane.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/portfolio/assets/pba/cube.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;collisions-between-obbs&quot;&gt;Collisions between OBBs&lt;/h3&gt;

&lt;p&gt;This last simulation has two OBBs colliding with each other.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/portfolio/assets/pba/domino.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;</content><author><name></name></author><category term="physics" /><summary type="html">This is a set of physics-based animations I made at university using C++. Here’s the code on GitHub.</summary></entry><entry><title type="html">Website</title><link href="http://localhost:4000/portfolio/site/" rel="alternate" type="text/html" title="Website" /><published>2017-05-01T00:00:00+01:00</published><updated>2017-05-01T00:00:00+01:00</updated><id>http://localhost:4000/portfolio/website</id><content type="html" xml:base="http://localhost:4000/portfolio/site/">&lt;p&gt;I hope you’re enjoying this simple website because I took care of every pixel.&lt;/p&gt;

&lt;p&gt;I like minimalism, and you’ve probably noticed. I used warm colours and only one accent colour for interactive elements. There are no shadows and no rounded corners. It was very important for me to have visual consistency and a pleasant experience overall.&lt;/p&gt;

&lt;p&gt;The abstract (or title) of each portfolio entry uses a monospace font: this makes it easier to recognize this element throughout the site and it highlights the fact that this is a portfolio of a developer. They all have tags to easily categorize them.&lt;/p&gt;

&lt;p&gt;The navigation buttons are at the bottom of each page, beginning from the home. By following it, the user can have a look at all my works in one go. The content of every page is simple and concise with big pictures whenever possible. This is so because the user is most likely an employer, and they have a bunch of other portfolios waiting after mine. &lt;em&gt;Isn’t that right, mr. employer?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;On the top left corner there’s an additional &lt;em&gt;Home&lt;/em&gt; button. I would have preferred not to have it, but usability is important.&lt;/p&gt;

&lt;p&gt;I used &lt;a href=&quot;https://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt; to build it from the ground up. I’m not a web developer but hey, it came out pretty good!&lt;/p&gt;</content><author><name></name></author><category term="web" /><category term="ui / ux" /><summary type="html">I hope you’re enjoying this simple website because I took care of every pixel.</summary></entry><entry><title type="html">Monument Valley Opengl</title><link href="http://localhost:4000/portfolio/mv/" rel="alternate" type="text/html" title="Monument Valley Opengl" /><published>2017-04-01T00:00:00+01:00</published><updated>2017-04-01T00:00:00+01:00</updated><id>http://localhost:4000/portfolio/monument-valley-opengl</id><content type="html" xml:base="http://localhost:4000/portfolio/mv/">&lt;p&gt;&lt;img src=&quot;/portfolio/assets/mv/animated.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This is a coursework I’ve made for a Computer Graphics module. I used &lt;a href=&quot;https://www.opengl.org/&quot;&gt;OpenGL&lt;/a&gt; to recreate a scene that looked like a level from the game &lt;em&gt;&lt;a href=&quot;https://www.monumentvalleygame.com/&quot;&gt;Monument Valley&lt;/a&gt;&lt;/em&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/portfolio/assets/mv/mv_screen.jpg&quot; alt=&quot;A level from the game&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You’ve probably noticed the impossible geometries: I made them by using a camera with an orthographical projection, therefore you can’t perceive depth.&lt;/p&gt;

&lt;p&gt;I used three directional lights facing the three visible surfaces. In this way I have a higher control of the colours I want my scene to have.&lt;/p&gt;

&lt;p&gt;The Phong shader had to be used without the reflection component because reflection is affected by the distance from the camera. Using it would break the illusion of impossible geometries.&lt;/p&gt;

&lt;p&gt;To create the water waves that you can see on the left cube I multiplied two identical normal maps moving in different directions.&lt;/p&gt;

&lt;p&gt;Finally, I worked with frames to allow multiple ones to work at the same time: I can have multiple post-processing effects, such as vignette and inverse colours.&lt;/p&gt;

&lt;p&gt;You can take a look at it on my &lt;a href=&quot;https://github.com/MarcoMoroni/CG_cw2&quot;&gt;GitHub&lt;/a&gt; and you can also read the &lt;a href=&quot;href=&amp;quot;https://github.com/MarcoMoroni/CG_cw2/blob/master/Report/report.pdf&quot;&gt;report&lt;/a&gt; I wrote.&lt;/p&gt;

&lt;p&gt;You should play that game btw, it’s gorgeous.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/portfolio/assets/mv/screen04.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/portfolio/assets/mv/screen06.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/portfolio/assets/mv/screen05.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/portfolio/assets/mv/screen02.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/portfolio/assets/mv/screen07.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;</content><author><name></name></author><category term="graphics" /><summary type="html"></summary></entry><entry><title type="html">Pearl Puzzle</title><link href="http://localhost:4000/portfolio/pearl/" rel="alternate" type="text/html" title="Pearl Puzzle" /><published>2016-01-01T00:00:00+00:00</published><updated>2016-01-01T00:00:00+00:00</updated><id>http://localhost:4000/portfolio/pearl-puzzle</id><content type="html" xml:base="http://localhost:4000/portfolio/pearl/">&lt;p&gt;&lt;img src=&quot;/portfolio/assets/pearl/title01.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The theme for the &lt;a href=&quot;https://globalgamejam.org/&quot;&gt;Global Game Jam 2017&lt;/a&gt; was &lt;em&gt;waves&lt;/em&gt; and because it was my first Game Jam, I decided to keep it simple. I participated with a friend and we had a lot of fun!&lt;/p&gt;

&lt;p&gt;Our idea was to make a &lt;em&gt;Professor Layton&lt;/em&gt; style puzzle game with a seaside theme and use the movement of waves to solve it. We used &lt;a href=&quot;https://unity3d.com/&quot;&gt;Unity&lt;/a&gt; and I drew the assets in &lt;a href=&quot;http://www.pixelmator.com/&quot;&gt;Pixelmator&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Here’s how you play it: by pressing the directional arrows you move all the movable pieces on the grid by 1 step in the direction you chose. Your goal is to place all the pearls back to the corresponding shell.&lt;/p&gt;

&lt;p&gt;After the 48 hours we ended up with the two working levels that you can see below.&lt;/p&gt;

&lt;p&gt;You can download this tiny game from my &lt;a href=&quot;https://github.com/MarcoMoroni/ShellPuzzle&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/portfolio/assets/pearl/screen01.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/portfolio/assets/pearl/screen02.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;</content><author><name></name></author><category term="game jam" /><category term="games dev" /><category term="unity" /><summary type="html"></summary></entry></feed>